// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package database

import (
	"context"
)

const getWord = `-- name: GetWord :one
SELECT id, word_en, word_ja, audio_url FROM words
WHERE id = ? LIMIT 1
`

func (q *Queries) GetWord(ctx context.Context, id int64) (Word, error) {
	row := q.db.QueryRowContext(ctx, getWord, id)
	var i Word
	err := row.Scan(
		&i.ID,
		&i.WordEn,
		&i.WordJa,
		&i.AudioUrl,
	)
	return i, err
}

const getWordsRandomly = `-- name: GetWordsRandomly :many
SELECT id, word_en, word_ja, audio_url FROM words
ORDER BY RANDOM() LIMIT ?
`

func (q *Queries) GetWordsRandomly(ctx context.Context, limit int32) ([]Word, error) {
	rows, err := q.db.QueryContext(ctx, getWordsRandomly, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Word
	for rows.Next() {
		var i Word
		if err := rows.Scan(
			&i.ID,
			&i.WordEn,
			&i.WordJa,
			&i.AudioUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listWords = `-- name: ListWords :many
SELECT id, word_en, word_ja, audio_url FROM words
ORDER BY id LIMIT ? OFFSET ?
`

type ListWordsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListWords(ctx context.Context, arg ListWordsParams) ([]Word, error) {
	rows, err := q.db.QueryContext(ctx, listWords, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Word
	for rows.Next() {
		var i Word
		if err := rows.Scan(
			&i.ID,
			&i.WordEn,
			&i.WordJa,
			&i.AudioUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
